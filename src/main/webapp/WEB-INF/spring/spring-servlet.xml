<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:oxm="http://www.springframework.org/schema/oxm"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd">
    
	<!--
	  adds support for reading/writing XML/JSON (i.e. dispatching to @Controllers)
	  adds support for @Valid on @Controller inputs
	  -->
    <mvc:annotation-driven/>
    
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties" ref="appProperties" />
		<property name="ignoreUnresolvablePlaceholders" value="true"/>
	</bean>
    
    <!--
      handles HTTP GET requests for /resources/** 
      used to serve up static resources in the ${webappRoot}/resources directory (i.e. js, css, html)
      -->
    <mvc:resources mapping="/resources/**" location="/resources/,classpath:/resources/" />
    
    <!-- 
      all handler methods in controllers must resolve to a logical view name, per view resolvers
      http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-viewresolver-resolver
        order: priority of view, starting at zero and higher values having lower priority 
      this resolves a view based on the request file name or Accept header
      http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/web/servlet/view/ContentNegotiatingViewResolver.html
      -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
    	<property name="order" value="0" />
        <property name="contentNegotiationManager">
            <!-- determines the requested media type through a list of strategies -->
            <bean class="org.springframework.web.accept.ContentNegotiationManager">
                <constructor-arg>
                    <!-- define strategies, without this constructor default would be -->
                    <!-- accept header, extension, parameter, then fall back to fixed -->
                    <!-- https://github.com/rstoyanchev/spring-mvc-32-update/blob/master/content-negotiation/slides.md -->
                    <!-- we don't want the fall back, should go to next priority (order) ViewResolver -->
                    <list>
	                    <!-- uses path extension of URL to determine what media types are requested -->
	                    <bean class="org.springframework.web.accept.PathExtensionContentNegotiationStrategy">
	                        <constructor-arg>
	                            <map>
	                                <entry key="json" value="application/json" />
	                                <entry key="xml" value="application/xml" />
	                            </map>
	                        </constructor-arg>
	                    </bean>

                        <!-- uses Accept header to determine what media types are requested -->
                        <bean class="org.springframework.web.accept.HeaderContentNegotiationStrategy" />
	                </list>
                </constructor-arg>
            </bean>
        </property>
        <property name="defaultViews">
            <list>
                <!-- render JSON content by serializing using Jackson's ObjectMapper -->
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
                <!-- render XML content by serializing using XStream library -->
                <bean class="org.springframework.web.servlet.view.xml.MarshallingView">
                    <constructor-arg>
                        <bean class="org.springframework.oxm.xstream.XStreamMarshaller">
                            <!-- utilized @XStream annotations -->
                            <property name="autodetectAnnotations" value="true" />
                            <!-- by specifying classes, conversion data overhead is left out -->
                            <!-- TODO if XML support necessary, add model objects -->
                            <property name="supportedClasses">
                                <list>
                                    <value>java.util.List</value>
                                    <value>java.util.Map</value>
                                </list>
                            </property>
                        </bean>
                    </constructor-arg>
                </bean>
            </list>
        </property>
    </bean>
    
    <!-- 
      this resolves a view to an internal resource (effectively Servlets and JSPs)
      -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
        <property name="order"  value="1"/>
        <property name="exposeContextBeansAsAttributes" value="true"/>
        <property name="exposedContextBeanNames" value="appProperties"/>
    </bean>
    
    <!-- http://pfelitti87.blogspot.com/2012/07/rest-services-with-spring-3-xml-json.html -->
	<!-- http://forum.springsource.org/showthread.php?83599-ContentNegotiatingViewResolver-and-MarshallingView -->
	
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
	</bean>
	
</beans>
